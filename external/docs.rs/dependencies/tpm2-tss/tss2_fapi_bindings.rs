/* automatically generated by rust-bindgen 0.70.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TSS2_RC_LAYER_SHIFT: u32 = 16;
pub const TSS2_BASE_RC_GENERAL_FAILURE: u32 = 1;
pub const TSS2_BASE_RC_NOT_IMPLEMENTED: u32 = 2;
pub const TSS2_BASE_RC_BAD_CONTEXT: u32 = 3;
pub const TSS2_BASE_RC_ABI_MISMATCH: u32 = 4;
pub const TSS2_BASE_RC_BAD_REFERENCE: u32 = 5;
pub const TSS2_BASE_RC_INSUFFICIENT_BUFFER: u32 = 6;
pub const TSS2_BASE_RC_BAD_SEQUENCE: u32 = 7;
pub const TSS2_BASE_RC_NO_CONNECTION: u32 = 8;
pub const TSS2_BASE_RC_TRY_AGAIN: u32 = 9;
pub const TSS2_BASE_RC_IO_ERROR: u32 = 10;
pub const TSS2_BASE_RC_BAD_VALUE: u32 = 11;
pub const TSS2_BASE_RC_NOT_PERMITTED: u32 = 12;
pub const TSS2_BASE_RC_INVALID_SESSIONS: u32 = 13;
pub const TSS2_BASE_RC_NO_DECRYPT_PARAM: u32 = 14;
pub const TSS2_BASE_RC_NO_ENCRYPT_PARAM: u32 = 15;
pub const TSS2_BASE_RC_BAD_SIZE: u32 = 16;
pub const TSS2_BASE_RC_MALFORMED_RESPONSE: u32 = 17;
pub const TSS2_BASE_RC_INSUFFICIENT_CONTEXT: u32 = 18;
pub const TSS2_BASE_RC_INSUFFICIENT_RESPONSE: u32 = 19;
pub const TSS2_BASE_RC_INCOMPATIBLE_TCTI: u32 = 20;
pub const TSS2_BASE_RC_NOT_SUPPORTED: u32 = 21;
pub const TSS2_BASE_RC_BAD_TCTI_STRUCTURE: u32 = 22;
pub const TSS2_BASE_RC_MEMORY: u32 = 23;
pub const TSS2_BASE_RC_BAD_TR: u32 = 24;
pub const TSS2_BASE_RC_MULTIPLE_DECRYPT_SESSIONS: u32 = 25;
pub const TSS2_BASE_RC_MULTIPLE_ENCRYPT_SESSIONS: u32 = 26;
pub const TSS2_BASE_RC_RSP_AUTH_FAILED: u32 = 27;
pub const TSS2_BASE_RC_NO_CONFIG: u32 = 28;
pub const TSS2_BASE_RC_BAD_PATH: u32 = 29;
pub const TSS2_BASE_RC_NOT_DELETABLE: u32 = 30;
pub const TSS2_BASE_RC_PATH_ALREADY_EXISTS: u32 = 31;
pub const TSS2_BASE_RC_KEY_NOT_FOUND: u32 = 32;
pub const TSS2_BASE_RC_SIGNATURE_VERIFICATION_FAILED: u32 = 33;
pub const TSS2_BASE_RC_HASH_MISMATCH: u32 = 34;
pub const TSS2_BASE_RC_KEY_NOT_DUPLICABLE: u32 = 35;
pub const TSS2_BASE_RC_PATH_NOT_FOUND: u32 = 36;
pub const TSS2_BASE_RC_NO_CERT: u32 = 37;
pub const TSS2_BASE_RC_NO_PCR: u32 = 38;
pub const TSS2_BASE_RC_PCR_NOT_RESETTABLE: u32 = 39;
pub const TSS2_BASE_RC_BAD_TEMPLATE: u32 = 40;
pub const TSS2_BASE_RC_AUTHORIZATION_FAILED: u32 = 41;
pub const TSS2_BASE_RC_AUTHORIZATION_UNKNOWN: u32 = 42;
pub const TSS2_BASE_RC_NV_NOT_READABLE: u32 = 43;
pub const TSS2_BASE_RC_NV_TOO_SMALL: u32 = 44;
pub const TSS2_BASE_RC_NV_NOT_WRITEABLE: u32 = 45;
pub const TSS2_BASE_RC_POLICY_UNKNOWN: u32 = 46;
pub const TSS2_BASE_RC_NV_WRONG_TYPE: u32 = 47;
pub const TSS2_BASE_RC_NAME_ALREADY_EXISTS: u32 = 48;
pub const TSS2_BASE_RC_NO_TPM: u32 = 49;
pub const TSS2_BASE_RC_BAD_KEY: u32 = 50;
pub const TSS2_BASE_RC_NO_HANDLE: u32 = 51;
pub const TSS2_BASE_RC_NOT_PROVISIONED: u32 = 52;
pub const TSS2_BASE_RC_ALREADY_PROVISIONED: u32 = 53;
pub const TSS2_LAYER_IMPLEMENTATION_SPECIFIC_OFFSET: u32 = 63488;
pub const TSS2_LEVEL_IMPLEMENTATION_SPECIFIC_SHIFT: u32 = 11;
pub const TPM2_MAX_COMMAND_SIZE: u32 = 4096;
pub const TPM2_MAX_RESPONSE_SIZE: u32 = 4096;
pub const TPM2_NUM_PCR_BANKS: u32 = 16;
pub const TPM2_MAX_DIGEST_BUFFER: u32 = 1024;
pub const TPM2_MAX_NV_BUFFER_SIZE: u32 = 2048;
pub const TPM2_MAX_PCRS: u32 = 32;
pub const TPM2_MAX_ALG_LIST_SIZE: u32 = 128;
pub const TPM2_MAX_CAP_CC: u32 = 256;
pub const TPM2_MAX_CAP_BUFFER: u32 = 1024;
pub const TPM2_MAX_CONTEXT_SIZE: u32 = 5120;
pub const TPM2_SHA_DIGEST_SIZE: u32 = 20;
pub const TPM2_SHA1_DIGEST_SIZE: u32 = 20;
pub const TPM2_SHA256_DIGEST_SIZE: u32 = 32;
pub const TPM2_SHA384_DIGEST_SIZE: u32 = 48;
pub const TPM2_SHA512_DIGEST_SIZE: u32 = 64;
pub const TPM2_SM3_256_DIGEST_SIZE: u32 = 32;
pub const TPM2_MAX_SYM_BLOCK_SIZE: u32 = 16;
pub const TPM2_MAX_SYM_DATA: u32 = 256;
pub const TPM2_MAX_ECC_KEY_BYTES: u32 = 128;
pub const TPM2_MAX_SYM_KEY_BYTES: u32 = 32;
pub const TPM2_MAX_RSA_KEY_BYTES: u32 = 512;
pub const TPM2_LABEL_MAX_BUFFER: u32 = 32;
pub const TPM2_PCR_SELECT_MAX: u32 = 4;
pub const TPM2_PRIVATE_VENDOR_SPECIFIC_BYTES: u32 = 1280;
pub const TPMA_LOCALITY_EXTENDED_SHIFT: u32 = 5;
pub const TPMA_CC_COMMANDINDEX_SHIFT: u32 = 0;
pub const TPMA_CC_CHANDLES_SHIFT: u32 = 25;
pub const TPMA_CC_RES_SHIFT: u32 = 30;
pub const TPM2_NO: u32 = 0;
pub const TPM2_YES: u32 = 1;
pub const TPM2_NV_INDEX_INDEX_SHIFT: u32 = 0;
pub const TPM2_NV_INDEX_RH_NV_SHIFT: u32 = 24;
pub const TPMA_NV_TPM2_NT_SHIFT: u32 = 4;
pub const _SYS_POLL_H: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRNORM: u32 = 256;
pub const POLLWRBAND: u32 = 512;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const TSS2_TCTI_TIMEOUT_BLOCK: i32 = -1;
pub const TSS2_TCTI_TIMEOUT_NONE: u32 = 0;
pub const TSS2_TCTI_INFO_SYMBOL: &[u8; 15] = b"Tss2_Tcti_Info\0";
pub const FAPI_ESYSBLOB_CONTEXTLOAD: u32 = 1;
pub const FAPI_ESYSBLOB_DESERIALIZE: u32 = 2;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type UINT8 = u8;
pub type BYTE = u8;
pub type INT8 = i8;
pub type BOOL = ::std::os::raw::c_int;
pub type UINT16 = u16;
pub type INT16 = i16;
pub type UINT32 = u32;
pub type INT32 = i32;
pub type UINT64 = u64;
pub type INT64 = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_ABI_VERSION {
    pub tssCreator: u32,
    pub tssFamily: u32,
    pub tssLevel: u32,
    pub tssVersion: u32,
}
pub type TSS2_RC = u32;
pub type TPM2_ALG_ID = UINT16;
pub type TPM2_ECC_CURVE = UINT16;
pub type TPM2_CC = UINT32;
pub type TPM2_ALGORITHM_ID = UINT32;
pub type TPM2_MODIFIER_INDICATOR = UINT32;
pub type TPM2_AUTHORIZATION_SIZE = UINT32;
pub type TPM2_PARAMETER_SIZE = UINT32;
pub type TPM2_KEY_SIZE = UINT16;
pub type TPM2_KEY_BITS = UINT16;
pub type TPM2_SPEC = UINT32;
pub type TPM2_GENERATED = UINT32;
pub type TPM2_RC = UINT32;
pub type TPM2_CLOCK_ADJUST = INT8;
pub type TPM2_EO = UINT16;
pub type TPM2_ST = UINT16;
pub type TPM2_SU = UINT16;
pub type TPM2_SE = UINT8;
pub type TPM2_CAP = UINT32;
pub type TPM2_PT = UINT32;
pub type TPM2_PT_PCR = UINT32;
pub type TPM2_PS = UINT32;
pub type TPM2_HANDLE = UINT32;
pub type TPM2_HT = UINT8;
pub type TPM2_RH = TPM2_HANDLE;
pub type TPM2_HC = TPM2_HANDLE;
pub type TPMA_ALGORITHM = u32;
pub type TPMA_OBJECT = u32;
pub type TPMA_SESSION = UINT8;
pub type TPMA_LOCALITY = UINT8;
pub type TPMA_PERMANENT = u32;
pub type TPMA_STARTUP_CLEAR = u32;
pub type TPMA_MEMORY = u32;
pub type TPMA_CC = u32;
pub type TPMA_MODES = u32;
pub type TPMA_X509_KEY_USAGE = u32;
pub type TPMA_ACT = u32;
pub type TPMI_YES_NO = BYTE;
pub type TPMI_DH_OBJECT = TPM2_HANDLE;
pub type TPMI_DH_PERSISTENT = TPM2_HANDLE;
pub type TPMI_DH_ENTITY = TPM2_HANDLE;
pub type TPMI_DH_PCR = TPM2_HANDLE;
pub type TPMI_SH_AUTH_SESSION = TPM2_HANDLE;
pub type TPMI_SH_HMAC = TPM2_HANDLE;
pub type TPMI_SH_POLICY = TPM2_HANDLE;
pub type TPMI_DH_CONTEXT = TPM2_HANDLE;
pub type TPMI_DH_SAVED = TPM2_HANDLE;
pub type TPMI_RH_HIERARCHY = TPM2_HANDLE;
pub type TPMI_RH_ENABLES = TPM2_HANDLE;
pub type TPMI_RH_HIERARCHY_AUTH = TPM2_HANDLE;
pub type TPMI_RH_HIERARCHY_POLICY = TPM2_HANDLE;
pub type TPMI_RH_PLATFORM = TPM2_HANDLE;
pub type TPMI_RH_OWNER = TPM2_HANDLE;
pub type TPMI_RH_ENDORSEMENT = TPM2_HANDLE;
pub type TPMI_RH_PROVISION = TPM2_HANDLE;
pub type TPMI_RH_CLEAR = TPM2_HANDLE;
pub type TPMI_RH_NV_AUTH = TPM2_HANDLE;
pub type TPMI_RH_LOCKOUT = TPM2_HANDLE;
pub type TPMI_RH_NV_INDEX = TPM2_HANDLE;
pub type TPMI_RH_AC = TPM2_HANDLE;
pub type TPMI_RH_ACT = TPM2_HANDLE;
pub type TPMI_ALG_HASH = TPM2_ALG_ID;
pub type TPMI_ALG_ASYM = TPM2_ALG_ID;
pub type TPMI_ALG_SYM = TPM2_ALG_ID;
pub type TPMI_ALG_SYM_OBJECT = TPM2_ALG_ID;
pub type TPMI_ALG_SYM_MODE = TPM2_ALG_ID;
pub type TPMI_ALG_KDF = TPM2_ALG_ID;
pub type TPMI_ALG_SIG_SCHEME = TPM2_ALG_ID;
pub type TPMI_ECC_KEY_EXCHANGE = TPM2_ALG_ID;
pub type TPMI_ST_COMMAND_TAG = TPM2_ST;
pub type TPMI_ALG_MAC_SCHEME = TPM2_ALG_ID;
pub type TPMI_ALG_CIPHER_MODE = TPM2_ALG_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_EMPTY {
    pub empty: [BYTE; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ALGORITHM_DESCRIPTION {
    pub alg: TPM2_ALG_ID,
    pub attributes: TPMA_ALGORITHM,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_HA {
    pub sha1: [BYTE; 20usize],
    pub sha256: [BYTE; 32usize],
    pub sha384: [BYTE; 48usize],
    pub sha512: [BYTE; 64usize],
    pub sm3_256: [BYTE; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_HA {
    pub hashAlg: TPMI_ALG_HASH,
    pub digest: TPMU_HA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_DIGEST {
    pub size: UINT16,
    pub buffer: [BYTE; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_DATA {
    pub size: UINT16,
    pub buffer: [BYTE; 64usize],
}
pub type TPM2B_NONCE = TPM2B_DIGEST;
pub type TPM2B_AUTH = TPM2B_DIGEST;
pub type TPM2B_OPERAND = TPM2B_DIGEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_EVENT {
    pub size: UINT16,
    pub buffer: [BYTE; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_MAX_BUFFER {
    pub size: UINT16,
    pub buffer: [BYTE; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_MAX_NV_BUFFER {
    pub size: UINT16,
    pub buffer: [BYTE; 2048usize],
}
pub type TPM2B_TIMEOUT = TPM2B_DIGEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_IV {
    pub size: UINT16,
    pub buffer: [BYTE; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_NAME {
    pub digest: TPMT_HA,
    pub handle: TPM2_HANDLE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_NAME {
    pub size: UINT16,
    pub name: [BYTE; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_PCR_SELECT {
    pub sizeofSelect: UINT8,
    pub pcrSelect: [BYTE; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_PCR_SELECTION {
    pub hash: TPMI_ALG_HASH,
    pub sizeofSelect: UINT8,
    pub pcrSelect: [BYTE; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_CREATION {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_VERIFIED {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_AUTH {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMT_TK_HASHCHECK {
    pub tag: TPM2_ST,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub digest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ALG_PROPERTY {
    pub alg: TPM2_ALG_ID,
    pub algProperties: TPMA_ALGORITHM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TAGGED_PROPERTY {
    pub property: TPM2_PT,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TAGGED_PCR_SELECT {
    pub tag: TPM2_PT_PCR,
    pub sizeofSelect: UINT8,
    pub pcrSelect: [BYTE; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_TAGGED_POLICY {
    pub handle: TPM2_HANDLE,
    pub policyHash: TPMT_HA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ACT_DATA {
    pub handle: TPM2_HANDLE,
    pub timeout: UINT32,
    pub attributes: TPMA_ACT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_CC {
    pub count: UINT32,
    pub commandCodes: [TPM2_CC; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_CCA {
    pub count: UINT32,
    pub commandAttributes: [TPMA_CC; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ALG {
    pub count: UINT32,
    pub algorithms: [TPM2_ALG_ID; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_HANDLE {
    pub count: UINT32,
    pub handle: [TPM2_HANDLE; 254usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_DIGEST {
    pub count: UINT32,
    pub digests: [TPM2B_DIGEST; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPML_DIGEST_VALUES {
    pub count: UINT32,
    pub digests: [TPMT_HA; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_PCR_SELECTION {
    pub count: UINT32,
    pub pcrSelections: [TPMS_PCR_SELECTION; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ALG_PROPERTY {
    pub count: UINT32,
    pub algProperties: [TPMS_ALG_PROPERTY; 127usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_TAGGED_TPM_PROPERTY {
    pub count: UINT32,
    pub tpmProperty: [TPMS_TAGGED_PROPERTY; 127usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_TAGGED_PCR_PROPERTY {
    pub count: UINT32,
    pub pcrProperty: [TPMS_TAGGED_PCR_SELECT; 84usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ECC_CURVE {
    pub count: UINT32,
    pub eccCurves: [TPM2_ECC_CURVE; 508usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPML_TAGGED_POLICY {
    pub count: UINT32,
    pub policies: [TPMS_TAGGED_POLICY; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_ACT_DATA {
    pub count: UINT32,
    pub actData: [TPMS_ACT_DATA; 84usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_INTEL_PTT_PROPERTY {
    pub count: UINT32,
    pub property: [UINT32; 256usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_CAPABILITIES {
    pub algorithms: TPML_ALG_PROPERTY,
    pub handles: TPML_HANDLE,
    pub command: TPML_CCA,
    pub ppCommands: TPML_CC,
    pub auditCommands: TPML_CC,
    pub assignedPCR: TPML_PCR_SELECTION,
    pub tpmProperties: TPML_TAGGED_TPM_PROPERTY,
    pub pcrProperties: TPML_TAGGED_PCR_PROPERTY,
    pub eccCurves: TPML_ECC_CURVE,
    pub authPolicies: TPML_TAGGED_POLICY,
    pub actData: TPML_ACT_DATA,
    pub intelPttProperty: TPML_INTEL_PTT_PROPERTY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_CAPABILITY_DATA {
    pub capability: TPM2_CAP,
    pub data: TPMU_CAPABILITIES,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CLOCK_INFO {
    pub clock: UINT64,
    pub resetCount: UINT32,
    pub restartCount: UINT32,
    pub safe: TPMI_YES_NO,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TIME_INFO {
    pub time: UINT64,
    pub clockInfo: TPMS_CLOCK_INFO,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_TIME_ATTEST_INFO {
    pub time: TPMS_TIME_INFO,
    pub firmwareVersion: UINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CERTIFY_INFO {
    pub name: TPM2B_NAME,
    pub qualifiedName: TPM2B_NAME,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_QUOTE_INFO {
    pub pcrSelect: TPML_PCR_SELECTION,
    pub pcrDigest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_COMMAND_AUDIT_INFO {
    pub auditCounter: UINT64,
    pub digestAlg: TPM2_ALG_ID,
    pub auditDigest: TPM2B_DIGEST,
    pub commandDigest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SESSION_AUDIT_INFO {
    pub exclusiveSession: TPMI_YES_NO,
    pub sessionDigest: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CREATION_INFO {
    pub objectName: TPM2B_NAME,
    pub creationHash: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_CERTIFY_INFO {
    pub indexName: TPM2B_NAME,
    pub offset: UINT16,
    pub nvContents: TPM2B_MAX_NV_BUFFER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_DIGEST_CERTIFY_INFO {
    pub indexName: TPM2B_NAME,
    pub nvDigest: TPM2B_DIGEST,
}
pub type TPMI_ST_ATTEST = TPM2_ST;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_ATTEST {
    pub certify: TPMS_CERTIFY_INFO,
    pub creation: TPMS_CREATION_INFO,
    pub quote: TPMS_QUOTE_INFO,
    pub commandAudit: TPMS_COMMAND_AUDIT_INFO,
    pub sessionAudit: TPMS_SESSION_AUDIT_INFO,
    pub time: TPMS_TIME_ATTEST_INFO,
    pub nv: TPMS_NV_CERTIFY_INFO,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ATTEST {
    pub magic: TPM2_GENERATED,
    pub type_: TPMI_ST_ATTEST,
    pub qualifiedSigner: TPM2B_NAME,
    pub extraData: TPM2B_DATA,
    pub clockInfo: TPMS_CLOCK_INFO,
    pub firmwareVersion: UINT64,
    pub attested: TPMU_ATTEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ATTEST {
    pub size: UINT16,
    pub attestationData: [BYTE; 2304usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_AUTH_COMMAND {
    pub sessionHandle: TPMI_SH_AUTH_SESSION,
    pub nonce: TPM2B_NONCE,
    pub sessionAttributes: TPMA_SESSION,
    pub hmac: TPM2B_AUTH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_AUTH_RESPONSE {
    pub nonce: TPM2B_NONCE,
    pub sessionAttributes: TPMA_SESSION,
    pub hmac: TPM2B_AUTH,
}
pub type TPMI_AES_KEY_BITS = TPM2_KEY_BITS;
pub type TPMI_SM4_KEY_BITS = TPM2_KEY_BITS;
pub type TPMI_CAMELLIA_KEY_BITS = TPM2_KEY_BITS;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SYM_KEY_BITS {
    pub aes: TPMI_AES_KEY_BITS,
    pub sm4: TPMI_SM4_KEY_BITS,
    pub camellia: TPMI_CAMELLIA_KEY_BITS,
    pub sym: TPM2_KEY_BITS,
    pub exclusiveOr: TPMI_ALG_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SYM_MODE {
    pub aes: TPMI_ALG_SYM_MODE,
    pub sm4: TPMI_ALG_SYM_MODE,
    pub camellia: TPMI_ALG_SYM_MODE,
    pub sym: TPMI_ALG_SYM_MODE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SYM_DEF {
    pub algorithm: TPMI_ALG_SYM,
    pub keyBits: TPMU_SYM_KEY_BITS,
    pub mode: TPMU_SYM_MODE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SYM_DEF_OBJECT {
    pub algorithm: TPMI_ALG_SYM_OBJECT,
    pub keyBits: TPMU_SYM_KEY_BITS,
    pub mode: TPMU_SYM_MODE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_SYM_KEY {
    pub size: UINT16,
    pub buffer: [BYTE; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_SYMCIPHER_PARMS {
    pub sym: TPMT_SYM_DEF_OBJECT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_SENSITIVE_DATA {
    pub size: UINT16,
    pub buffer: [BYTE; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SENSITIVE_CREATE {
    pub userAuth: TPM2B_AUTH,
    pub data: TPM2B_SENSITIVE_DATA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_SENSITIVE_CREATE {
    pub size: UINT16,
    pub sensitive: TPMS_SENSITIVE_CREATE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SCHEME_HASH {
    pub hashAlg: TPMI_ALG_HASH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SCHEME_ECDAA {
    pub hashAlg: TPMI_ALG_HASH,
    pub count: UINT16,
}
pub type TPMI_ALG_KEYEDHASH_SCHEME = TPM2_ALG_ID;
pub type TPMS_SCHEME_HMAC = TPMS_SCHEME_HASH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SCHEME_XOR {
    pub hashAlg: TPMI_ALG_HASH,
    pub kdf: TPMI_ALG_KDF,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SCHEME_KEYEDHASH {
    pub hmac: TPMS_SCHEME_HMAC,
    pub exclusiveOr: TPMS_SCHEME_XOR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_KEYEDHASH_SCHEME {
    pub scheme: TPMI_ALG_KEYEDHASH_SCHEME,
    pub details: TPMU_SCHEME_KEYEDHASH,
}
pub type TPMS_SIG_SCHEME_RSASSA = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_RSAPSS = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_ECDSA = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_SM2 = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_ECSCHNORR = TPMS_SCHEME_HASH;
pub type TPMS_SIG_SCHEME_ECDAA = TPMS_SCHEME_ECDAA;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SIG_SCHEME {
    pub rsassa: TPMS_SIG_SCHEME_RSASSA,
    pub rsapss: TPMS_SIG_SCHEME_RSAPSS,
    pub ecdsa: TPMS_SIG_SCHEME_ECDSA,
    pub ecdaa: TPMS_SIG_SCHEME_ECDAA,
    pub sm2: TPMS_SIG_SCHEME_SM2,
    pub ecschnorr: TPMS_SIG_SCHEME_ECSCHNORR,
    pub hmac: TPMS_SCHEME_HMAC,
    pub any: TPMS_SCHEME_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SIG_SCHEME {
    pub scheme: TPMI_ALG_SIG_SCHEME,
    pub details: TPMU_SIG_SCHEME,
}
pub type TPMS_ENC_SCHEME_OAEP = TPMS_SCHEME_HASH;
pub type TPMS_ENC_SCHEME_RSAES = TPMS_EMPTY;
pub type TPMS_KEY_SCHEME_ECDH = TPMS_SCHEME_HASH;
pub type TPMS_KEY_SCHEME_ECMQV = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_MGF1 = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_KDF1_SP800_56A = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_KDF2 = TPMS_SCHEME_HASH;
pub type TPMS_SCHEME_KDF1_SP800_108 = TPMS_SCHEME_HASH;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_KDF_SCHEME {
    pub mgf1: TPMS_SCHEME_MGF1,
    pub kdf1_sp800_56a: TPMS_SCHEME_KDF1_SP800_56A,
    pub kdf2: TPMS_SCHEME_KDF2,
    pub kdf1_sp800_108: TPMS_SCHEME_KDF1_SP800_108,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_KDF_SCHEME {
    pub scheme: TPMI_ALG_KDF,
    pub details: TPMU_KDF_SCHEME,
}
pub type TPMI_ALG_ASYM_SCHEME = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_ASYM_SCHEME {
    pub ecdh: TPMS_KEY_SCHEME_ECDH,
    pub ecmqv: TPMS_KEY_SCHEME_ECMQV,
    pub rsassa: TPMS_SIG_SCHEME_RSASSA,
    pub rsapss: TPMS_SIG_SCHEME_RSAPSS,
    pub ecdsa: TPMS_SIG_SCHEME_ECDSA,
    pub ecdaa: TPMS_SIG_SCHEME_ECDAA,
    pub sm2: TPMS_SIG_SCHEME_SM2,
    pub ecschnorr: TPMS_SIG_SCHEME_ECSCHNORR,
    pub rsaes: TPMS_ENC_SCHEME_RSAES,
    pub oaep: TPMS_ENC_SCHEME_OAEP,
    pub anySig: TPMS_SCHEME_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_ASYM_SCHEME {
    pub scheme: TPMI_ALG_ASYM_SCHEME,
    pub details: TPMU_ASYM_SCHEME,
}
pub type TPMI_ALG_RSA_SCHEME = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_RSA_SCHEME {
    pub scheme: TPMI_ALG_RSA_SCHEME,
    pub details: TPMU_ASYM_SCHEME,
}
pub type TPMI_ALG_RSA_DECRYPT = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_RSA_DECRYPT {
    pub scheme: TPMI_ALG_RSA_DECRYPT,
    pub details: TPMU_ASYM_SCHEME,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PUBLIC_KEY_RSA {
    pub size: UINT16,
    pub buffer: [BYTE; 512usize],
}
pub type TPMI_RSA_KEY_BITS = TPM2_KEY_BITS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PRIVATE_KEY_RSA {
    pub size: UINT16,
    pub buffer: [BYTE; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ECC_PARAMETER {
    pub size: UINT16,
    pub buffer: [BYTE; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ECC_POINT {
    pub x: TPM2B_ECC_PARAMETER,
    pub y: TPM2B_ECC_PARAMETER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ECC_POINT {
    pub size: UINT16,
    pub point: TPMS_ECC_POINT,
}
pub type TPMI_ALG_ECC_SCHEME = TPM2_ALG_ID;
pub type TPMI_ECC_CURVE = TPM2_ECC_CURVE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_ECC_SCHEME {
    pub scheme: TPMI_ALG_ECC_SCHEME,
    pub details: TPMU_ASYM_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ALGORITHM_DETAIL_ECC {
    pub curveID: TPM2_ECC_CURVE,
    pub keySize: UINT16,
    pub kdf: TPMT_KDF_SCHEME,
    pub sign: TPMT_ECC_SCHEME,
    pub p: TPM2B_ECC_PARAMETER,
    pub a: TPM2B_ECC_PARAMETER,
    pub b: TPM2B_ECC_PARAMETER,
    pub gX: TPM2B_ECC_PARAMETER,
    pub gY: TPM2B_ECC_PARAMETER,
    pub n: TPM2B_ECC_PARAMETER,
    pub h: TPM2B_ECC_PARAMETER,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SIGNATURE_RSA {
    pub hash: TPMI_ALG_HASH,
    pub sig: TPM2B_PUBLIC_KEY_RSA,
}
pub type TPMS_SIGNATURE_RSASSA = TPMS_SIGNATURE_RSA;
pub type TPMS_SIGNATURE_RSAPSS = TPMS_SIGNATURE_RSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_SIGNATURE_ECC {
    pub hash: TPMI_ALG_HASH,
    pub signatureR: TPM2B_ECC_PARAMETER,
    pub signatureS: TPM2B_ECC_PARAMETER,
}
pub type TPMS_SIGNATURE_ECDSA = TPMS_SIGNATURE_ECC;
pub type TPMS_SIGNATURE_ECDAA = TPMS_SIGNATURE_ECC;
pub type TPMS_SIGNATURE_SM2 = TPMS_SIGNATURE_ECC;
pub type TPMS_SIGNATURE_ECSCHNORR = TPMS_SIGNATURE_ECC;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SIGNATURE {
    pub rsassa: TPMS_SIGNATURE_RSASSA,
    pub rsapss: TPMS_SIGNATURE_RSAPSS,
    pub ecdsa: TPMS_SIGNATURE_ECDSA,
    pub ecdaa: TPMS_SIGNATURE_ECDAA,
    pub sm2: TPMS_SIGNATURE_SM2,
    pub ecschnorr: TPMS_SIGNATURE_ECSCHNORR,
    pub hmac: TPMT_HA,
    pub any: TPMS_SCHEME_HASH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SIGNATURE {
    pub sigAlg: TPMI_ALG_SIG_SCHEME,
    pub signature: TPMU_SIGNATURE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_ENCRYPTED_SECRET {
    pub ecc: [BYTE; 260usize],
    pub rsa: [BYTE; 512usize],
    pub symmetric: [BYTE; 66usize],
    pub keyedHash: [BYTE; 66usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ENCRYPTED_SECRET {
    pub size: UINT16,
    pub secret: [BYTE; 512usize],
}
pub type TPMI_ALG_PUBLIC = TPM2_ALG_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_PUBLIC_ID {
    pub keyedHash: TPM2B_DIGEST,
    pub sym: TPM2B_DIGEST,
    pub rsa: TPM2B_PUBLIC_KEY_RSA,
    pub ecc: TPMS_ECC_POINT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_KEYEDHASH_PARMS {
    pub scheme: TPMT_KEYEDHASH_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ASYM_PARMS {
    pub symmetric: TPMT_SYM_DEF_OBJECT,
    pub scheme: TPMT_ASYM_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_RSA_PARMS {
    pub symmetric: TPMT_SYM_DEF_OBJECT,
    pub scheme: TPMT_RSA_SCHEME,
    pub keyBits: TPMI_RSA_KEY_BITS,
    pub exponent: UINT32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMS_ECC_PARMS {
    pub symmetric: TPMT_SYM_DEF_OBJECT,
    pub scheme: TPMT_ECC_SCHEME,
    pub curveID: TPMI_ECC_CURVE,
    pub kdf: TPMT_KDF_SCHEME,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_PUBLIC_PARMS {
    pub keyedHashDetail: TPMS_KEYEDHASH_PARMS,
    pub symDetail: TPMS_SYMCIPHER_PARMS,
    pub rsaDetail: TPMS_RSA_PARMS,
    pub eccDetail: TPMS_ECC_PARMS,
    pub asymDetail: TPMS_ASYM_PARMS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_PUBLIC_PARMS {
    pub type_: TPMI_ALG_PUBLIC,
    pub parameters: TPMU_PUBLIC_PARMS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_PUBLIC {
    pub type_: TPMI_ALG_PUBLIC,
    pub nameAlg: TPMI_ALG_HASH,
    pub objectAttributes: TPMA_OBJECT,
    pub authPolicy: TPM2B_DIGEST,
    pub parameters: TPMU_PUBLIC_PARMS,
    pub unique: TPMU_PUBLIC_ID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPM2B_PUBLIC {
    pub size: UINT16,
    pub publicArea: TPMT_PUBLIC,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_TEMPLATE {
    pub size: UINT16,
    pub buffer: [BYTE; 612usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PRIVATE_VENDOR_SPECIFIC {
    pub size: UINT16,
    pub buffer: [BYTE; 1280usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TPMU_SENSITIVE_COMPOSITE {
    pub rsa: TPM2B_PRIVATE_KEY_RSA,
    pub ecc: TPM2B_ECC_PARAMETER,
    pub bits: TPM2B_SENSITIVE_DATA,
    pub sym: TPM2B_SYM_KEY,
    pub any: TPM2B_PRIVATE_VENDOR_SPECIFIC,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPMT_SENSITIVE {
    pub sensitiveType: TPMI_ALG_PUBLIC,
    pub authValue: TPM2B_AUTH,
    pub seedValue: TPM2B_DIGEST,
    pub sensitive: TPMU_SENSITIVE_COMPOSITE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPM2B_SENSITIVE {
    pub size: UINT16,
    pub sensitiveArea: TPMT_SENSITIVE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PRIVATE {
    pub integrityOuter: TPM2B_DIGEST,
    pub integrityInner: TPM2B_DIGEST,
    pub sensitive: TPM2B_SENSITIVE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_PRIVATE {
    pub size: UINT16,
    pub buffer: [BYTE; 1550usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_ID_OBJECT {
    pub integrityHMAC: TPM2B_DIGEST,
    pub encIdentity: TPM2B_DIGEST,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_ID_OBJECT {
    pub size: UINT16,
    pub credential: [BYTE; 132usize],
}
pub type TPM2_NV_INDEX = u32;
pub type TPM2_NT = UINT8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_PIN_COUNTER_PARAMETERS {
    pub pinCount: UINT32,
    pub pinLimit: UINT32,
}
pub type TPMA_NV = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_NV_PUBLIC {
    pub nvIndex: TPMI_RH_NV_INDEX,
    pub nameAlg: TPMI_ALG_HASH,
    pub attributes: TPMA_NV,
    pub authPolicy: TPM2B_DIGEST,
    pub dataSize: UINT16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_NV_PUBLIC {
    pub size: UINT16,
    pub nvPublic: TPMS_NV_PUBLIC,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_CONTEXT_SENSITIVE {
    pub size: UINT16,
    pub buffer: [BYTE; 5120usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CONTEXT_DATA {
    pub integrity: TPM2B_DIGEST,
    pub encrypted: TPM2B_CONTEXT_SENSITIVE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_CONTEXT_DATA {
    pub size: UINT16,
    pub buffer: [BYTE; 5188usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CONTEXT {
    pub sequence: UINT64,
    pub savedHandle: TPMI_DH_CONTEXT,
    pub hierarchy: TPMI_RH_HIERARCHY,
    pub contextBlob: TPM2B_CONTEXT_DATA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_CREATION_DATA {
    pub pcrSelect: TPML_PCR_SELECTION,
    pub pcrDigest: TPM2B_DIGEST,
    pub locality: TPMA_LOCALITY,
    pub parentNameAlg: TPM2_ALG_ID,
    pub parentName: TPM2B_NAME,
    pub parentQualifiedName: TPM2B_NAME,
    pub outsideInfo: TPM2B_DATA,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPM2B_CREATION_DATA {
    pub size: UINT16,
    pub creationData: TPMS_CREATION_DATA,
}
pub type TPM_AT = UINT32;
pub type TPM_EA = UINT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPMS_AC_OUTPUT {
    pub tag: TPM_AT,
    pub data: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPML_AC_CAPABILITIES {
    pub count: UINT32,
    pub acCapabilities: [TPMS_AC_OUTPUT; 128usize],
}
pub type nfds_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
extern "C" {
    pub fn poll(
        __fds: *mut pollfd,
        __nfds: nfds_t,
        __timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type TSS2_TCTI_POLL_HANDLE = pollfd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_TCTI_OPAQUE_CONTEXT_BLOB {
    _unused: [u8; 0],
}
pub type TSS2_TCTI_CONTEXT = TSS2_TCTI_OPAQUE_CONTEXT_BLOB;
pub type TSS2_TCTI_TRANSMIT_FCN = ::std::option::Option<
    unsafe extern "C" fn(
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        size: usize,
        command: *const u8,
    ) -> TSS2_RC,
>;
pub type TSS2_TCTI_RECEIVE_FCN = ::std::option::Option<
    unsafe extern "C" fn(
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        size: *mut usize,
        response: *mut u8,
        timeout: i32,
    ) -> TSS2_RC,
>;
pub type TSS2_TCTI_FINALIZE_FCN =
    ::std::option::Option<unsafe extern "C" fn(tctiContext: *mut TSS2_TCTI_CONTEXT)>;
pub type TSS2_TCTI_CANCEL_FCN =
    ::std::option::Option<unsafe extern "C" fn(tctiContext: *mut TSS2_TCTI_CONTEXT) -> TSS2_RC>;
pub type TSS2_TCTI_GET_POLL_HANDLES_FCN = ::std::option::Option<
    unsafe extern "C" fn(
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        handles: *mut TSS2_TCTI_POLL_HANDLE,
        num_handles: *mut usize,
    ) -> TSS2_RC,
>;
pub type TSS2_TCTI_SET_LOCALITY_FCN = ::std::option::Option<
    unsafe extern "C" fn(tctiContext: *mut TSS2_TCTI_CONTEXT, locality: u8) -> TSS2_RC,
>;
pub type TSS2_TCTI_MAKE_STICKY_FCN = ::std::option::Option<
    unsafe extern "C" fn(
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        handle: *mut TPM2_HANDLE,
        sticky: u8,
    ) -> TSS2_RC,
>;
pub type TSS2_TCTI_INIT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        tctiContext: *mut TSS2_TCTI_CONTEXT,
        size: *mut usize,
        config: *const ::std::os::raw::c_char,
    ) -> TSS2_RC,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_TCTI_CONTEXT_COMMON_V1 {
    pub magic: u64,
    pub version: u32,
    pub transmit: TSS2_TCTI_TRANSMIT_FCN,
    pub receive: TSS2_TCTI_RECEIVE_FCN,
    pub finalize: TSS2_TCTI_FINALIZE_FCN,
    pub cancel: TSS2_TCTI_CANCEL_FCN,
    pub getPollHandles: TSS2_TCTI_GET_POLL_HANDLES_FCN,
    pub setLocality: TSS2_TCTI_SET_LOCALITY_FCN,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_TCTI_CONTEXT_COMMON_V2 {
    pub v1: TSS2_TCTI_CONTEXT_COMMON_V1,
    pub makeSticky: TSS2_TCTI_MAKE_STICKY_FCN,
}
pub type TSS2_TCTI_CONTEXT_COMMON_CURRENT = TSS2_TCTI_CONTEXT_COMMON_V2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSS2_TCTI_INFO {
    pub version: u32,
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub config_help: *const ::std::os::raw::c_char,
    pub init: TSS2_TCTI_INIT_FUNC,
}
pub type TSS2_TCTI_INFO_FUNC =
    ::std::option::Option<unsafe extern "C" fn() -> *const TSS2_TCTI_INFO>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FAPI_CONTEXT {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fapi_Initialize(
        context: *mut *mut FAPI_CONTEXT,
        uri: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Initialize_Async(
        context: *mut *mut FAPI_CONTEXT,
        uri: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Initialize_Finish(context: *mut *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Finalize(context: *mut *mut FAPI_CONTEXT);
}
extern "C" {
    pub fn Fapi_GetTcti(context: *mut FAPI_CONTEXT, tcti: *mut *mut TSS2_TCTI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Free(ptr: *mut ::std::os::raw::c_void);
}
pub type FAPI_POLL_HANDLE = pollfd;
extern "C" {
    pub fn Fapi_GetPollHandles(
        context: *mut FAPI_CONTEXT,
        handles: *mut *mut FAPI_POLL_HANDLE,
        num_handles: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetInfo(
        context: *mut FAPI_CONTEXT,
        info: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetInfo_Async(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetInfo_Finish(
        context: *mut FAPI_CONTEXT,
        info: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Provision(
        context: *mut FAPI_CONTEXT,
        authValueEh: *const ::std::os::raw::c_char,
        authValueSh: *const ::std::os::raw::c_char,
        authValueLockout: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Provision_Async(
        context: *mut FAPI_CONTEXT,
        authValueEh: *const ::std::os::raw::c_char,
        authValueSh: *const ::std::os::raw::c_char,
        authValueLockout: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Provision_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetPlatformCertificates(
        context: *mut FAPI_CONTEXT,
        certificates: *mut *mut u8,
        certificatesSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetPlatformCertificates_Async(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetPlatformCertificates_Finish(
        context: *mut FAPI_CONTEXT,
        certificates: *mut *mut u8,
        certificatesSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetRandom(
        context: *mut FAPI_CONTEXT,
        numBytes: usize,
        data: *mut *mut u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetRandom_Async(context: *mut FAPI_CONTEXT, numBytes: usize) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetRandom_Finish(context: *mut FAPI_CONTEXT, data: *mut *mut u8) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Import(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        importData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Import_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        importData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Import_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_List(
        context: *mut FAPI_CONTEXT,
        searchPath: *const ::std::os::raw::c_char,
        pathList: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_List_Async(
        context: *mut FAPI_CONTEXT,
        searchPath: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_List_Finish(
        context: *mut FAPI_CONTEXT,
        pathList: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Delete(context: *mut FAPI_CONTEXT, path: *const ::std::os::raw::c_char) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Delete_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Delete_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetEsysBlob(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *mut u8,
        data: *mut *mut u8,
        length: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetEsysBlob_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetEsysBlob_Finish(
        context: *mut FAPI_CONTEXT,
        type_: *mut u8,
        data: *mut *mut u8,
        length: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ChangeAuth(
        context: *mut FAPI_CONTEXT,
        entityPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ChangeAuth_Async(
        context: *mut FAPI_CONTEXT,
        entityPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ChangeAuth_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetDescription(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetDescription_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetDescription_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetDescription(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        description: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetDescription_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetDescription_Finish(
        context: *mut FAPI_CONTEXT,
        description: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetAppData(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        appData: *const u8,
        appDataSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetAppData_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        appData: *const u8,
        appDataSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetAppData_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetAppData(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        appData: *mut *mut u8,
        appDataSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetAppData_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetAppData_Finish(
        context: *mut FAPI_CONTEXT,
        appData: *mut *mut u8,
        appDataSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetTpmBlobs(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        tpm2bPublic: *mut *mut u8,
        tpm2bPublicSize: *mut usize,
        tpm2bPrivate: *mut *mut u8,
        tpm2bPrivateSize: *mut usize,
        policy: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetTpmBlobs_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetTpmBlobs_Finish(
        context: *mut FAPI_CONTEXT,
        tpm2bPublic: *mut *mut u8,
        tpm2bPublicSize: *mut usize,
        tpm2bPrivate: *mut *mut u8,
        tpm2bPrivateSize: *mut usize,
        policy: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateKey(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        policyPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateKey_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        policyPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateKey_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Sign(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        padding: *const ::std::os::raw::c_char,
        digest: *const u8,
        digestSize: usize,
        signature: *mut *mut u8,
        signatureSize: *mut usize,
        publicKey: *mut *mut ::std::os::raw::c_char,
        certificate: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Sign_Async(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        padding: *const ::std::os::raw::c_char,
        digest: *const u8,
        digestSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Sign_Finish(
        context: *mut FAPI_CONTEXT,
        signature: *mut *mut u8,
        signatureSize: *mut usize,
        publicKey: *mut *mut ::std::os::raw::c_char,
        certificate: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_VerifySignature(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        digest: *const u8,
        digestSize: usize,
        signature: *const u8,
        signatureSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_VerifySignature_Async(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        digest: *const u8,
        digestSize: usize,
        signature: *const u8,
        signatureSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_VerifySignature_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Encrypt(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        plainText: *const u8,
        plainTextSize: usize,
        cipherText: *mut *mut u8,
        cipherTextSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Encrypt_Async(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        plainText: *const u8,
        plainTextSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Encrypt_Finish(
        context: *mut FAPI_CONTEXT,
        cipherText: *mut *mut u8,
        cipherTextSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Decrypt(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        cipherText: *const u8,
        cipherTextSize: usize,
        plainText: *mut *mut u8,
        plainTextSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Decrypt_Async(
        context: *mut FAPI_CONTEXT,
        keyPath: *const ::std::os::raw::c_char,
        cipherText: *const u8,
        cipherTextSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Decrypt_Finish(
        context: *mut FAPI_CONTEXT,
        plainText: *mut *mut u8,
        plainTextSize: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetCertificate(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        x509certData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetCertificate_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        x509certData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_SetCertificate_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetCertificate(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        x509certData: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetCertificate_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_GetCertificate_Finish(
        context: *mut FAPI_CONTEXT,
        x509certData: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ExportKey(
        context: *mut FAPI_CONTEXT,
        pathOfKeyToDuplicate: *const ::std::os::raw::c_char,
        pathToPublicKeyOfNewParent: *const ::std::os::raw::c_char,
        exportedData: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ExportKey_Async(
        context: *mut FAPI_CONTEXT,
        pathOfKeyToDuplicate: *const ::std::os::raw::c_char,
        pathToPublicKeyOfNewParent: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ExportKey_Finish(
        context: *mut FAPI_CONTEXT,
        exportedData: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateSeal(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: usize,
        policyPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
        data: *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateSeal_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: usize,
        policyPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
        data: *const u8,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateSeal_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Unseal(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        data: *mut *mut u8,
        size: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Unseal_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Unseal_Finish(
        context: *mut FAPI_CONTEXT,
        data: *mut *mut u8,
        size: *mut usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ExportPolicy(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        jsonPolicy: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ExportPolicy_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_ExportPolicy_Finish(
        context: *mut FAPI_CONTEXT,
        jsonPolicy: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_AuthorizePolicy(
        context: *mut FAPI_CONTEXT,
        policyPath: *const ::std::os::raw::c_char,
        keyPath: *const ::std::os::raw::c_char,
        policyRef: *const u8,
        policyRefSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_AuthorizePolicy_Async(
        context: *mut FAPI_CONTEXT,
        policyPath: *const ::std::os::raw::c_char,
        keyPath: *const ::std::os::raw::c_char,
        policyRef: *const u8,
        policyRefSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_AuthorizePolicy_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_WriteAuthorizeNv(
        context: *mut FAPI_CONTEXT,
        nvPath: *const ::std::os::raw::c_char,
        policyPath: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_WriteAuthorizeNv_Async(
        context: *mut FAPI_CONTEXT,
        nvPath: *const ::std::os::raw::c_char,
        policyPath: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_WriteAuthorizeNv_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_PcrRead(
        context: *mut FAPI_CONTEXT,
        pcrIndex: u32,
        pcrValue: *mut *mut u8,
        pcrValueSize: *mut usize,
        pcrLog: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_PcrRead_Async(context: *mut FAPI_CONTEXT, pcrIndex: u32) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_PcrRead_Finish(
        context: *mut FAPI_CONTEXT,
        pcrValue: *mut *mut u8,
        pcrValueSize: *mut usize,
        pcrLog: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_PcrExtend(
        context: *mut FAPI_CONTEXT,
        pcr: u32,
        data: *const u8,
        dataSize: usize,
        logData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_PcrExtend_Async(
        context: *mut FAPI_CONTEXT,
        pcr: u32,
        data: *const u8,
        dataSize: usize,
        logData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_PcrExtend_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Quote(
        context: *mut FAPI_CONTEXT,
        pcrList: *mut u32,
        pcrListSize: usize,
        keyPath: *const ::std::os::raw::c_char,
        quoteType: *const ::std::os::raw::c_char,
        qualifyingData: *const u8,
        qualifyingDataSize: usize,
        quoteInfo: *mut *mut ::std::os::raw::c_char,
        signature: *mut *mut u8,
        signatureSize: *mut usize,
        pcrLog: *mut *mut ::std::os::raw::c_char,
        certificate: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Quote_Async(
        context: *mut FAPI_CONTEXT,
        pcrList: *mut u32,
        pcrListSize: usize,
        keyPath: *const ::std::os::raw::c_char,
        quoteType: *const ::std::os::raw::c_char,
        qualifyingData: *const u8,
        qualifyingDataSize: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_Quote_Finish(
        context: *mut FAPI_CONTEXT,
        quoteInfo: *mut *mut ::std::os::raw::c_char,
        signature: *mut *mut u8,
        signatureSize: *mut usize,
        pcrLog: *mut *mut ::std::os::raw::c_char,
        certificate: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_VerifyQuote(
        context: *mut FAPI_CONTEXT,
        publicKeyPath: *const ::std::os::raw::c_char,
        qualifyingData: *const u8,
        qualifyingDataSize: usize,
        quoteInfo: *const ::std::os::raw::c_char,
        signature: *const u8,
        signatureSize: usize,
        pcrLog: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_VerifyQuote_Async(
        context: *mut FAPI_CONTEXT,
        publicKeyPath: *const ::std::os::raw::c_char,
        qualifyingData: *const u8,
        qualifyingDataSize: usize,
        quoteInfo: *const ::std::os::raw::c_char,
        signature: *const u8,
        signatureSize: usize,
        pcrLog: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_VerifyQuote_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateNv(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: usize,
        policyPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateNv_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: usize,
        policyPath: *const ::std::os::raw::c_char,
        authValue: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_CreateNv_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvRead(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        data: *mut *mut u8,
        size: *mut usize,
        logData: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvRead_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvRead_Finish(
        context: *mut FAPI_CONTEXT,
        data: *mut *mut u8,
        size: *mut usize,
        logData: *mut *mut ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvWrite(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        data: *const u8,
        size: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvWrite_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        data: *const u8,
        size: usize,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvWrite_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvExtend(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        data: *const u8,
        size: usize,
        logData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvExtend_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        data: *const u8,
        size: usize,
        logData: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvExtend_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvIncrement(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvIncrement_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvIncrement_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvSetBits(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        bitmap: u64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvSetBits_Async(
        context: *mut FAPI_CONTEXT,
        path: *const ::std::os::raw::c_char,
        bitmap: u64,
    ) -> TSS2_RC;
}
extern "C" {
    pub fn Fapi_NvSetBits_Finish(context: *mut FAPI_CONTEXT) -> TSS2_RC;
}
pub type Fapi_CB_Auth = ::std::option::Option<
    unsafe extern "C" fn(
        objectPath: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        auth: *mut *const ::std::os::raw::c_char,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC,
>;
extern "C" {
    pub fn Fapi_SetAuthCB(
        context: *mut FAPI_CONTEXT,
        callback: Fapi_CB_Auth,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC;
}
pub type Fapi_CB_Branch = ::std::option::Option<
    unsafe extern "C" fn(
        objectPath: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        branchNames: *mut *const ::std::os::raw::c_char,
        numBranches: usize,
        selectedBranch: *mut usize,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC,
>;
extern "C" {
    pub fn Fapi_SetBranchCB(
        context: *mut FAPI_CONTEXT,
        callback: Fapi_CB_Branch,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC;
}
pub type Fapi_CB_Sign = ::std::option::Option<
    unsafe extern "C" fn(
        objectPath: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        publicKey: *const ::std::os::raw::c_char,
        publicKeyHint: *const ::std::os::raw::c_char,
        hashAlg: u32,
        dataToSign: *const u8,
        dataToSignSize: usize,
        signature: *mut *const u8,
        signatureSize: *mut usize,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC,
>;
extern "C" {
    pub fn Fapi_SetSignCB(
        context: *mut FAPI_CONTEXT,
        callback: Fapi_CB_Sign,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC;
}
pub type Fapi_CB_PolicyAction = ::std::option::Option<
    unsafe extern "C" fn(
        objectPath: *const ::std::os::raw::c_char,
        action: *const ::std::os::raw::c_char,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC,
>;
extern "C" {
    pub fn Fapi_SetPolicyActionCB(
        context: *mut FAPI_CONTEXT,
        callback: Fapi_CB_PolicyAction,
        userData: *mut ::std::os::raw::c_void,
    ) -> TSS2_RC;
}
